// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:flutter_wanandroid/entity/user_entity.dart';
import 'package:flutter_wanandroid/generated/json/user_entity_helper.dart';
import 'package:flutter_wanandroid/entity/article_entity.dart';
import 'package:flutter_wanandroid/generated/json/article_entity_helper.dart';
import 'package:flutter_wanandroid/entity/banner_entity.dart';
import 'package:flutter_wanandroid/generated/json/banner_entity_helper.dart';

class JsonConvert<T> {
	T fromJson(Map<String, dynamic> json) {
		return _getFromJson<T>(runtimeType, this, json);
	}

  Map<String, dynamic> toJson() {
		return _getToJson<T>(runtimeType, this);
  }

  static _getFromJson<T>(Type type, data, json) {
    switch (type) {
			case UserEntity:
				return userEntityFromJson(data as UserEntity, json) as T;
			case ArticleEntity:
				return articleEntityFromJson(data as ArticleEntity, json) as T;
			case ArticleTags:
				return articleTagsFromJson(data as ArticleTags, json) as T;
			case BannerEntity:
				return bannerEntityFromJson(data as BannerEntity, json) as T;
		   }
    return data as T;
  }

  static _getToJson<T>(Type type, data) {
		switch (type) {
			case UserEntity:
				return userEntityToJson(data as UserEntity);
			case ArticleEntity:
				return articleEntityToJson(data as ArticleEntity);
			case ArticleTags:
				return articleTagsToJson(data as ArticleTags);
			case BannerEntity:
				return bannerEntityToJson(data as BannerEntity);
			}
			return data as T;
		}
  //Go back to a single instance by type
	static _fromJsonSingle<M>( json) {
		String type = M.toString();
		if(type == (UserEntity).toString()){
			return UserEntity().fromJson(json);
		}	else if(type == (ArticleEntity).toString()){
			return ArticleEntity().fromJson(json);
		}	else if(type == (ArticleTags).toString()){
			return ArticleTags().fromJson(json);
		}	else if(type == (BannerEntity).toString()){
			return BannerEntity().fromJson(json);
		}
		return null;
	}

  //list is returned by type
	static M _getListChildType<M>(List data) {
		if(<UserEntity>[] is M){
			return data.map<UserEntity>((e) => UserEntity().fromJson(e)).toList() as M;
		}	else if(<ArticleEntity>[] is M){
			return data.map<ArticleEntity>((e) => ArticleEntity().fromJson(e)).toList() as M;
		}	else if(<ArticleTags>[] is M){
			return data.map<ArticleTags>((e) => ArticleTags().fromJson(e)).toList() as M;
		}	else if(<BannerEntity>[] is M){
			return data.map<BannerEntity>((e) => BannerEntity().fromJson(e)).toList() as M;
		}
		throw Exception("not fond");
	}

  static M fromJsonAsT<M>(json) {
    if (json is List) {
      return _getListChildType<M>(json);
    } else {
      return _fromJsonSingle<M>(json) as M;
    }
  }
}